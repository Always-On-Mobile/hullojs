/**
 * Always On Mobile - hullo API
 * Welcome to the hullo API.    With this API you can perform operations on your hullo account programmatically that you can call using the hullo console. The operations currently available include:    * Add / Update a member * Get the details of a member * Get the messages sent / received from a member * Send a message to a member  The hullo API is an easy to use RESTful API that can be called by any modern programming language that  supports HTTP calls, and also has out of the box support for several programming languages including:   * Java * Javascript    In order to use the API you will first need to generate an API key using the hullo console application, assigning it the the relevant scopes required for the operations you wish to call. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeEditType from './AttributeEditType';
import AttributeType from './AttributeType';

/**
 * The Attribute model module.
 * @module model/Attribute
 * @version 1.0.0
 */
class Attribute {
    /**
     * Constructs a new <code>Attribute</code>.
     * An attribute definition
     * @alias module:model/Attribute
     * @param name {String} The name of the attribute
     * @param type {module:model/AttributeType} 
     */
    constructor(name, type) { 
        
        Attribute.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Attribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attribute} obj Optional instance to populate.
     * @return {module:model/Attribute} The populated <code>Attribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attribute();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = AttributeType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('editType')) {
                obj['editType'] = AttributeEditType.constructFromObject(data['editType']);
            }
            if (data.hasOwnProperty('listItems')) {
                obj['listItems'] = ApiClient.convertToType(data['listItems'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attribute</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attribute.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listItems'])) {
            throw new Error("Expected the field `listItems` to be an array in the JSON data but got " + data['listItems']);
        }

        return true;
    }


}

Attribute.RequiredProperties = ["name", "type"];

/**
 * The name of the attribute
 * @member {String} name
 */
Attribute.prototype['name'] = undefined;

/**
 * @member {module:model/AttributeType} type
 */
Attribute.prototype['type'] = undefined;

/**
 * @member {Number} displayOrder
 */
Attribute.prototype['displayOrder'] = undefined;

/**
 * @member {module:model/AttributeEditType} editType
 */
Attribute.prototype['editType'] = undefined;

/**
 * @member {Array.<String>} listItems
 */
Attribute.prototype['listItems'] = undefined;






export default Attribute;

